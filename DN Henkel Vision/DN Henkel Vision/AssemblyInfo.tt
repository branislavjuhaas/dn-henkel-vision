<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
    string output = File.ReadAllText(Host.ResolvePath("AssemblyInfo.cs"));
    Regex pattern = new Regex("AssemblyVersion\\(\"(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<revision>\\d+)\\.(?<build>\\d+)\"\\)");
    MatchCollection matches = pattern.Matches(output);

    if ( matches.Count == 1 )
    {
        Build = Convert.ToInt32(matches[0].Groups["build"].Value) + 1;
        Patch = Convert.ToInt32(matches[0].Groups["revision"].Value);
    }
#>
// 
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// 

using System.Reflection;

[assembly: AssemblyVersion("<#= this.Major #>.<#= this.Minor #>.<#= this.Patch #>.<#= this.Build #>")]
[assembly: AssemblyFileVersion("<#= this.Major #>.<#= this.Minor #>.<#= this.Patch #>.<#= this.Build #>")]
[assembly: AssemblyInformationalVersion("<#= this.Major #>.<#= this.Minor #>.<#= this.Patch #>.<#= this.Build #>")]
<#+
    int Build = 0;
    int Patch = 0;

    int Major = (int)DateTime.Now.Year;
    int Minor = 1;
#>